<?php

namespace Tests\Unit\Services\TextProcess\Handlers;

use App\Services\TextProcess\Handlers\GetLinksFromHtml;
use App\Services\TextProcess\TextPayload;
use Tests\TestCase;

class GetLinksFromHtmlTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp();
    }

    public function test_get_links(): void
    {
        $html = '
<p><a href="https://www.php-fig.org/psr/psr-1/">PSR-1 (PHP Standard Recommendation)</a> ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è  ‚ñ∂
<h4>–ü—Ä–∞–≤–∏–ª–∞ PSR-1:</h4>
<p><strong>1. –§–∞–π–ª—ã –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω:</strong></p>
<ul>
<li>üî∏–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ ¬´<code>?php</code>¬ª –∏ ¬´<code>?=</code>¬ª.</li>
<li>üî∏–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω –≤ <a href="/notes/45">UTF-8</a>–±–µ–∑ BOM (<em>Byte Order Mark</em>).</li>
<li>üî∏–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –ª–∏–±–æ –æ–±—ä—è–≤–ª—è—Ç—å —Å–∏–º–≤–æ–ª—ã (–∫–ª–∞—Å—Å—ã, —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã), –ª–∏–±–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏ ‚ñ∂
    </ul>
' ;

        $payload = new TextPayload($html);
        $result = (new GetLinksFromHtml())->handle($payload);

        $this->assertCount(2, $result->links);

        $this->assertEquals('https://www.php-fig.org/psr/psr-1/', $result->links[0]['link']);
        $this->assertEquals('PSR-1 (PHP Standard Recommendation)', $result->links[0]['name']);
        $this->assertTrue($result->links[0]['is_external']);
        $this->assertNull($result->links[0]['to_id']);
        $this->assertEmpty($result->links[0]['attributes']);

        $this->assertEquals('/notes/45', $result->links[1]['link']);
        $this->assertEquals('UTF-8', $result->links[1]['name']);
        $this->assertFalse($result->links[1]['is_external']);
        $this->assertEquals('45', $result->links[1]['to_id']);
        $this->assertEquals($result->links[1]['attributes'], [
            "class" => "inner_link"
        ]);
    }

    public function test_trim_links_and_name(): void
    {
        $html = '
<p><a href=" https://www.php-fig.org/psr/psr-1/ "> PSR-1 (PHP Standard Recommendation) </a> ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è  ‚ñ∂
' ;

        $payload = new TextPayload($html);
        $result = (new GetLinksFromHtml())->handle($payload);

        $this->assertCount(1, $result->links);

        $this->assertEquals('https://www.php-fig.org/psr/psr-1/', $result->links[0]['link']);
        $this->assertEquals('PSR-1 (PHP Standard Recommendation)', $result->links[0]['name']);
    }

    public function test_trim_links_and_name_as_cyrillic(): void
    {
        $html = '
<p><a href=" https://www.php-fig.org/psr/psr-1/ "> –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ </a> ‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è  ‚ñ∂
' ;

        $payload = new TextPayload($html);
        $result = (new GetLinksFromHtml())->handle($payload);

        $this->assertCount(1, $result->links);

        $this->assertEquals('https://www.php-fig.org/psr/psr-1/', $result->links[0]['link']);
        $this->assertEquals('–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏', $result->links[0]['name']);
    }

    public function test_no_links(): void
    {
        $html = '
<p>PSR-1 (PHP Standard Recommendation)‚Äî —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è  ‚ñ∂
<h4>–ü—Ä–∞–≤–∏–ª–∞ PSR-1:</h4>
' ;

        $payload = new TextPayload($html);
        $result = (new GetLinksFromHtml())->handle($payload);

        $this->assertEmpty($result->links);
    }
}